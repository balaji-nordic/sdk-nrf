name: Sonarcloud analysis (native_posix only)
on:
  pull_request:

jobs:
  build:
    name: Sonar cloud analysis
    runs-on: ubuntu-latest
    container: nordicplayground/nrfconnect-sdk:main
    env:
      SONAR_SCANNER_VERSION: 4.7.0.2747
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          path: ncs/nrf
          fetch-depth: 0

      # Install more dependencies that are not part of the docker image but are needed by the workflow
      - name: Install more deps
        run: |
          apt install -y lcov gcc-multilib curl

      # The docker image comes pre-initialized with west dependencies. We want to do west update ourselves to to be sure that we get the latest changes in all repos.
      # The docker image is built nightly. So it may contain slightly out of date repos.
      # Hence we remove the .west folder and do a re-init
      - name: West init and update
        run: |
          rm -rf /workdir/.west/
          west init -l ncs/nrf
          cd ncs
          west update --narrow -o=--depth=1

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

      - name: Build native_posix tests with coverage enabled (via sonarcloud build wrapper)
        shell: bash
        run: |
          source ncs/zephyr/zephyr-env.sh
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} ncs/zephyr/scripts/twister -b -C -v -i -T ncs/nrf/ -p native_posix --quarantine-list ncs/nrf/scripts/quarantine.yaml --coverage-tool gcovr

      - name: Run native_posix tests
        shell: bash
        run: |
          source ncs/zephyr/zephyr-env.sh
          ncs/zephyr/scripts/twister --test-only -v -i -C -T ncs/nrf/ -p native_posix

      # Exclude twister-out because we dont need coverage reports for mocks and generated files.
      # Exclude tests/unity because it is not interesting
      # Exclude folders that contain source code with multiple definitions of the same function
      # depending on preprocessor macros. gcovr misbehaves due to this.
      # Issue: https://github.com/gcovr/gcovr/issues/586
      - name: Collect coverage into one XML report
        shell: bash
        run: |
          gcovr twister-out -v \
            --exclude=twister-out \
            --exclude-directories=tests/unity \
            --exclude-directories=ncs/zephyr/ \
            --exclude=ncs/nrf/tests/subsys/dfu/dfu_target_stream/src/main.c \
            --exclude=ncs/nrf/lib/hw_id/hw_id.c \
            --sonarqube coverage.xml

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner -X \
                        --define sonar.projectKey=balaji-nordic_sdk-nrf \
                        --define sonar.organization=balaji-nordic \
                        --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" \
                        --define sonar.exclusions="ncs/modules/**,ncs/zephyr/**,ncs/nrf/ext/**,**/*.py,**/*.vsdx,**twister-out**,**/*.java,**/*.html,**/*.xml,**/*.php" \
                        --define sonar.cpd.exclusions="**CMakeFiles**" \
                        --define sonar.coverageReportPaths=coverage.xml \
                        --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
                        --define sonar.cfamily.cache.enabled=false
