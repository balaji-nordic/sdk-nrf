#
# Copyright (c) 2019 Nordic Semiconductor
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
#

# Configuration for Unity and CMock
#
# See https://github.com/ThrowTheSwitch/CMock/blob/master/docs/CMock_Summary.md#config-options
# and https://github.com/ThrowTheSwitch/Unity/blob/master/docs/UnityHelperScriptsGuide.md#options-accepted-by-generate_test_runnerrb
#
# Some additional options are passed to cmock on the command line, see CMakeLists.txt.
:cmock:
    :plugins:
        - :ignore
        - :ignore_arg
        - :array
        - :callback
        - :return_thru_ptr
        - :expect_any_args
    :treat_externs: :include
    :callback_after_arg_check: true
    :exclude_setjmp_h: true

    :treat_as:
        'int8_t': 'INT8'
        'uint8_t': 'HEX8'
        'int16_t': 'INT16'
        'uint16_t': 'HEX16'
        'int32_t': 'INT32'
        'uint32_t': 'HEX32'
        'int64_t': 'INT64'
        'uint64_t': 'HEX64'
    # When building for QEMU_CORTEX_M3, the mock for SEGGER_RTT_ASM_WriteSkipNoLock gets defined
    # twice by CMocka. This is because of the way SEGGER_RTT.h re-defines
    # SEGGER_RTT_WriteSkipNoLock to SEGGER_RTT_ASM_WriteSkipNoLock using pre-processor directive.
    # Since this leads to compiler error, we safely skip generating mocks for
    # SEGGER_RTT_ASM_WriteSkipNoLock.
    :strippables: ['(?:SEGGER_RTT_ASM_WriteSkipNoLock\s*\(+.*?\)+)']

:unity:
    :suite_teardown: >
       extern int test_suiteTearDown(int); return test_suiteTearDown(num_failures);
    :main_name: unity_main
